#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV_L 1
#define SYM_L 2
#define FUN_L 3

#define MEH LCTL(LSHFT(LALT))

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        caps_lock_combo {
            timeout-ms = <50>;
            key-positions = <11 18>;
            bindings = <&kp CAPS>;
        };
  
        double_quote_combo {
            timeout-ms = <50>;
            key-positions = <01 02>;
            bindings = <&kp DQT>;
        };

        esc_combo {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp ESC>;
        };

        single_quote_combo {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp SQT>;
        };
        
        semi_combo {
            timeout-ms = <50>;
            key-positions = <07 08>;
            bindings = <&kp SEMI>;
        };

        enter_combo {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp ENTER>;
        };
        
        colon_combo {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp COLON>;
        };

        lbrace_combo {
            timeout-ms = <50>;
            key-positions = <10 13>;
            bindings = <&kp LBRC>;
        };

        rbrace_combo {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&kp RBRC>;
        };
        
        lsqrt_combo {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LBKT>;
        };

        rsqrt_combo {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RBKT>;
        };
 
        lsqrt_combo {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LPAR>;
        };
        
        rsqrt_combo {
            timeout-ms = <50>;
            key-positions = <16 18>;
            bindings = <&kp RPAR>;
        };

        lsqrt_combo {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LT>;
        };

        rsqrt_combo {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp GT>;
        };
 
        function_layer {
            timeout-ms = <50>;
            key-positions = <30 33>;
            bindings = <&mo FUN_L>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha_layer {
            label = "Alpha";
            bindings = <
                &bootloader  &kp W        &kp F       &kp P        &kp COMMA     &kp DOT   &kp SLASH       &kp J       &kp Y        &kp LC(A)
                &hm LCTRL A  &hm LSHFT R  &hm LALT S  &kp T        &kp G         &kp M     &kp N           &hm RALT H  &hm RSHFT I  &hm RCTL O
                &hm LGUI Z   &kp X        &kp C       &kp D        &kp V         &kp Q     &kp L           &kp U       &kp B        &hm RGUI K
                                                      &lt SYM_L E  &kp BKSP      &kp TAB   &lt NAV_L SPACE
            >;
        };

        nav_layer {
            label = "Navigation";
            bindings = <
                &kp LC(X) &kp LC(LS(V)) &none    &none       &kp C_MUTE     &kp LC(H)   &kp LC(J)   &kp LC(K)  &kp LC(L)  &none 
                &kp LC(C) &kp LC(V)     &none    &kp C_PLAY  &kp C_VOL_UP   &kp LARW    &kp DARW    &kp UARW   &kp RARW   &none
                &kp LC(Z) &kp LC(Y)     &none    &kp C_NEXT  &kp C_VOL_DN   &kp HOME    &kp PG_DN   &kp PG_UP  &kp END    &none
                                                 &none       &kp DEL        &none       &none
            >;
        };

        num_layer {
            label = "Symbol";
            bindings = <
                &none      &kp AT     &kp HASH    &kp DLLR   &kp PRCNT    &kp CARET    &kp AMPS    &kp STAR    &none      &none
                &kp N1     &kp N2     &kp N3      &kp N4     &kp N5       &kp N6       &kp N7      &kp N8      &kp N9     &kp N0
                &kp GRAVE  &kp TILDE  &kp EXCL    &kp BSLH   &kp PIPE     &kp QMARK    &kp UNDER   &kp MINUS   &kp PLUS   &kp EQUAL
                                                  &none      &none        &none        &none
            >;
        };

        fun_layer {
            label = "Funtion";
            bindings = <
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none     &bootloader  &none     &none   &none   &none
                &kp F1        &kp F2        &kp F3        &kp F4        &kp F5    &kp F6       &kp F7    &kp F8  &kp F9  &kp F10
                &kp F11       &kp F12       &kp PSCRN     &none         &none     &none        &none     &none   &none   &none
                                                          &none         &none     &none        &none
            >;
        };
    };
};

